import 'package:fl_chart/fl_chart.dart';
import 'package:flutter/material.dart';

class BreakPoints {
  final int total;
  final int saved;
  final int savedPercentage;
  final int converted;
  final int convertedPercentage;

  // Remove body from const constructor and add assertions to constructor initializer list
  const BreakPoints({
    required this.total,
    required this.saved,
    required this.savedPercentage,
    required this.converted,
    required this.convertedPercentage,
  })  : assert(total >= 0, 'Total must be non-negative'),
        assert(savedPercentage >= 0 && savedPercentage <= 100,
            'Saved percentage must be between 0 and 100'),
        assert(convertedPercentage >= 0 && convertedPercentage <= 100,
            'Converted percentage must be between 0 and 100');
}

class GamePoints {
  final int total;
  final int saved;
  final int savedPercentage;
  final int converted;
  final int convertedPercentage;

  // Remove body from const constructor and add assertions to constructor initializer list
  const GamePoints({
    required this.total,
    required this.saved,
    required this.savedPercentage,
    required this.converted,
    required this.convertedPercentage,
  })  : assert(total >= 0, 'Total must be non-negative'),
        assert(savedPercentage >= 0 && savedPercentage <= 100,
            'Saved percentage must be between 0 and 100'),
        assert(convertedPercentage >= 0 && convertedPercentage <= 100,
            'Converted percentage must be between 0 and 100');
}

class BreakPointsRadarChart extends StatefulWidget {
  final bool showPercentages;
  final BreakPoints breakPoints;
  final GamePoints gamePoints;
  final BreakPoints player2BreakPoints;
  final GamePoints player2GamePoints;

  const BreakPointsRadarChart({
    super.key,
    this.showPercentages = false,
    this.breakPoints = const BreakPoints(
      total: 100,
      saved: 10,
      savedPercentage: 65,
      converted: 75,
      convertedPercentage: 75,
    ),
    this.gamePoints = const GamePoints(
      total: 100,
      saved: 45,
      savedPercentage: 80,
      converted: 90,
      convertedPercentage: 90,
    ),
    this.player2BreakPoints = const BreakPoints(
      total: 100,
      saved: 44,
      savedPercentage: 70,
      converted: 50,
      convertedPercentage: 80,
    ),
    this.player2GamePoints = const GamePoints(
      total: 100,
      saved: 85,
      savedPercentage: 85,
      converted: 10,
      convertedPercentage: 45,
    ),
  });

  @override
  State<BreakPointsRadarChart> createState() => _BreakPointsRadarChartState();
}

class _BreakPointsRadarChartState extends State<BreakPointsRadarChart>
    with SingleTickerProviderStateMixin {
  late AnimationController _animationController;
  late Animation<double> _animation;
  int touchedIndex = -1;
  bool showPlayer1 = true;
  bool showPercentages = false;
  final PageController _pageController = PageController();

  @override
  void initState() {
    super.initState();
    _animationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1200),
    );
    _animation = Tween<double>(begin: 0.0, end: 1.0).animate(
      CurvedAnimation(
        parent: _animationController,
        curve: Curves.easeInOutCubic,
      ),
    );
    _animationController.forward();
  }

  @override
  void dispose() {
    _animationController.dispose();
    _pageController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Column(
      children: [
        // Player Switch
        Container(
          margin: const EdgeInsets.symmetric(vertical: 16),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Container(
                height: 8,
                width: 8,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: showPlayer1 ? Colors.blue : Colors.grey,
                ),
              ),
              const SizedBox(width: 8),
              Container(
                height: 8,
                width: 8,
                decoration: BoxDecoration(
                  shape: BoxShape.circle,
                  color: !showPlayer1 ? Colors.blue : Colors.grey,
                ),
              ),
            ],
          ),
        ),

        // PageView for charts
        Expanded(
          child: Column(
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.center,
                children: [
                  Text(
                    showPlayer1 ? 'Player 1' : 'Player 2',
                    style: const TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const SizedBox(width: 16),
                  SegmentedButton<bool>(
                    segments: const [
                      ButtonSegment<bool>(
                        value: false,
                        label: Text('Points'),
                      ),
                      ButtonSegment<bool>(
                        value: true,
                        label: Text('Percentage'),
                      ),
                    ],
                    selected: {showPercentages},
                    onSelectionChanged: (Set<bool> newSelection) {
                      setState(() {
                        showPercentages = newSelection.first;
                      });
                    },
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Expanded(
                child: PageView(
                  controller: _pageController,
                  onPageChanged: (index) {
                    setState(() {
                      showPlayer1 = index == 0;
                    });
                  },
                  children: [
                    _buildPlayerChart(
                      widget.breakPoints,
                      widget.gamePoints,
                      'Player 1',
                    ),
                    _buildPlayerChart(
                      widget.player2BreakPoints,
                      widget.player2GamePoints,
                      'Player 2',
                    ),
                  ],
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildPlayerChart(
      BreakPoints breakPoints, GamePoints gamePoints, String playerName) {
    return Column(
      children: [
        SizedBox(
          height: 300,
          child: AnimatedBuilder(
            animation: _animation,
            builder: (context, child) {
              return Transform.rotate(
                angle: _animation.value * 2 * 3.14159,
                child: Opacity(
                  opacity: _animation.value,
                  child: PieChart(
                    PieChartData(
                      pieTouchData: PieTouchData(
                        touchCallback: (event, response) {
                          setState(() {
                            if (!event.isInterestedForInteractions ||
                                response == null ||
                                response.touchedSection == null) {
                              touchedIndex = -1;
                              return;
                            }
                            touchedIndex =
                                response.touchedSection!.touchedSectionIndex;
                          });
                        },
                      ),
                      sections: [
                        PieChartSectionData(
                          color: Colors.blue,
                          value: showPercentages
                              ? breakPoints.savedPercentage.toDouble()
                              : breakPoints.saved.toDouble(),
                          title: showPercentages
                              ? '${breakPoints.savedPercentage}%'
                              : breakPoints.saved.toString(),
                          radius: touchedIndex == 0 ? 110 : 100,
                          titleStyle: TextStyle(
                            color: Colors.white,
                            fontSize: touchedIndex == 0 ? 16 : 14,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        PieChartSectionData(
                          color: Colors.green,
                          value: showPercentages
                              ? breakPoints.convertedPercentage.toDouble()
                              : breakPoints.converted.toDouble(),
                          title: showPercentages
                              ? '${breakPoints.convertedPercentage}%'
                              : breakPoints.converted.toString(),
                          radius: touchedIndex == 1 ? 110 : 100,
                          titleStyle: TextStyle(
                            color: Colors.white,
                            fontSize: touchedIndex == 1 ? 16 : 14,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        PieChartSectionData(
                          color: Colors.red,
                          value: showPercentages
                              ? gamePoints.savedPercentage.toDouble()
                              : gamePoints.saved.toDouble(),
                          title: showPercentages
                              ? '${gamePoints.savedPercentage}%'
                              : gamePoints.saved.toString(),
                          radius: touchedIndex == 2 ? 110 : 100,
                          titleStyle: TextStyle(
                            color: Colors.white,
                            fontSize: touchedIndex == 2 ? 16 : 14,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        PieChartSectionData(
                          color: Colors.purple,
                          value: showPercentages
                              ? gamePoints.convertedPercentage.toDouble()
                              : gamePoints.converted.toDouble(),
                          title: showPercentages
                              ? '${gamePoints.convertedPercentage}%'
                              : gamePoints.converted.toString(),
                          radius: touchedIndex == 3 ? 110 : 100,
                          titleStyle: TextStyle(
                            color: Colors.white,
                            fontSize: touchedIndex == 3 ? 16 : 14,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ],
                      sectionsSpace: 2,
                      centerSpaceRadius: 40,
                    ),
                  ),
                ),
              );
            },
          ),
        ),
        Container(
          margin: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
          padding: const EdgeInsets.all(24),
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(24),
            boxShadow: [
              BoxShadow(
                color: Colors.black.withOpacity(0.05),
                blurRadius: 20,
                spreadRadius: 0,
                offset: const Offset(0, 4),
              ),
            ],
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Text(
                    'Statistics',
                    style: TextStyle(
                      color: Colors.grey.shade800,
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      letterSpacing: 0.5,
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Wrap(
                spacing: 16,
                runSpacing: 16,
                children: [
                  _buildLegendItem('Break Points Saved',
                      const Color(0xFF4A90E2), breakPoints.savedPercentage),
                  _buildLegendItem('Break Points Converted',
                      const Color(0xFF50C878), breakPoints.convertedPercentage),
                  _buildLegendItem('Game Points Saved', Colors.red,
                      gamePoints.savedPercentage),
                  _buildLegendItem('Game Points Converted',
                      const Color(0xFF9B59B6), gamePoints.convertedPercentage),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildTotalStat(String label, int value, Color color) {
    return Column(
      children: [
        Text(
          label,
          style: TextStyle(
            color: color,
            fontSize: 14,
            fontWeight: FontWeight.w600,
            letterSpacing: 0.3,
          ),
        ),
        const SizedBox(height: 8),
        Text(
          value.toString(),
          style: TextStyle(
            color: color.withOpacity(0.8),
            fontSize: 24,
            fontWeight: FontWeight.bold,
          ),
        ),
      ],
    );
  }

  Widget _buildLegendItem(String text, Color color, int percentage) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
      decoration: BoxDecoration(
        color: color.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: color.withOpacity(0.3)),
      ),
      child: Row(
        mainAxisSize: MainAxisSize.min,
        children: [
          Container(
            width: 12,
            height: 12,
            decoration: BoxDecoration(
              color: color,
              shape: BoxShape.circle,
              boxShadow: [
                BoxShadow(
                  color: color.withOpacity(0.3),
                  blurRadius: 3,
                  offset: const Offset(0, 1),
                ),
              ],
            ),
          ),
          const SizedBox(width: 8),
          Text(
            text,
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.w600,
              color: color.withOpacity(0.8),
            ),
          ),
          const SizedBox(width: 8),
          Text(
            '$percentage%',
            style: TextStyle(
              fontSize: 12,
              fontWeight: FontWeight.bold,
              color: color,
            ),
          ),
        ],
      ),
    );
  }
}

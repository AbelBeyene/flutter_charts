import 'package:flutter/material.dart';

class TennisCourt extends StatelessWidget {
  const TennisCourt({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    return Stack(
      children: [
        Container(
          color: Color(0xFF2D5DA1), // Add background color
          width: double.infinity,
          height: double.infinity,
          child: LayoutBuilder(
            builder: (context, constraints) {
              return CustomPaint(
                size: Size(constraints.maxWidth, constraints.maxHeight),
                painter: CourtPainter(),
              );
            },
          ),
        ),
        Positioned(
          top: 0,
          left: 0,
          right: 0,
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              _buildColorIndicator(Colors.red, 'Wide'),
              const SizedBox(width: 8),
              _buildColorIndicator(Colors.green, 'Body'),
              const SizedBox(width: 8),
              _buildColorIndicator(Colors.blue, 'T'),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildColorIndicator(Color color, String label) {
    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
      decoration: BoxDecoration(
        color: color.withOpacity(0.8),
        borderRadius: BorderRadius.circular(16),
      ),
      child: Text(
        label,
        style: const TextStyle(
          color: Colors.white,
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }
}

class CourtPainter extends CustomPainter {
  @override
  void paint(Canvas canvas, Size size) {
    // Colors & Paint setup
    final courtPaint = Paint()
      ..color = const Color(0xFF2D5DA1) // Court blue color
      ..style = PaintingStyle.fill;

    final linePaint = Paint()
      ..color = Colors.white
      ..strokeWidth = 2.0
      ..style = PaintingStyle.stroke;

    // Court dimensions based on standard ratio (78 ft long / 36 ft wide).
    // Use full width and height for better fit
    final courtWidth = size.width;
    final courtHeight = size.height;

    // No need to center since we're using full dimensions
    final startX = 0.0;
    final startY = 0.0;

    // Draw the full doubles court rectangle with border
    final courtRect = Rect.fromLTWH(startX, startY, courtWidth, courtHeight);
    canvas.drawRect(courtRect, courtPaint);
    canvas.drawRect(courtRect, linePaint);

    // ==== Baselines (top and bottom) ====
    canvas.drawLine(
      Offset(startX, startY),
      Offset(startX + courtWidth, startY),
      linePaint,
    );
    canvas.drawLine(
      Offset(startX, startY + courtHeight),
      Offset(startX + courtWidth, startY + courtHeight),
      linePaint,
    );

    // ==== Singles sidelines ====
    final singlesWidth = courtWidth * (27 / 36);
    final singlesStartX = startX + (courtWidth - singlesWidth) / 2;

    canvas.drawLine(
      Offset(singlesStartX, startY),
      Offset(singlesStartX, startY + courtHeight),
      linePaint,
    );
    canvas.drawLine(
      Offset(singlesStartX + singlesWidth, startY),
      Offset(singlesStartX + singlesWidth, startY + courtHeight),
      linePaint,
    );

    // ==== Net line ====
    final netY = startY + courtHeight / 2;
    canvas.drawLine(
      Offset(startX, netY),
      Offset(startX + courtWidth, netY),
      linePaint,
    );

    // ==== Service lines ====
    final serviceLineDistance = courtHeight * (18 / 78);
    final topServiceLineY = startY + serviceLineDistance;
    final bottomServiceLineY = (startY + courtHeight) - serviceLineDistance;

    canvas.drawLine(
      Offset(singlesStartX, topServiceLineY),
      Offset(singlesStartX + singlesWidth, topServiceLineY),
      linePaint,
    );
    canvas.drawLine(
      Offset(singlesStartX, bottomServiceLineY),
      Offset(singlesStartX + singlesWidth, bottomServiceLineY),
      linePaint,
    );

    // ==== Center service line ====
    canvas.drawLine(
      Offset(startX + courtWidth / 2, netY),
      Offset(startX + courtWidth / 2, topServiceLineY),
      linePaint,
    );
    canvas.drawLine(
      Offset(startX + courtWidth / 2, netY),
      Offset(startX + courtWidth / 2, bottomServiceLineY),
      linePaint,
    );

    // ==== Center marks on each baseline ====
    const centerMarkHalfWidth = 4.0;
    final centerCourtX = startX + courtWidth / 2;

    canvas.drawLine(
      Offset(centerCourtX - centerMarkHalfWidth, startY),
      Offset(centerCourtX + centerMarkHalfWidth, startY),
      linePaint,
    );
    canvas.drawLine(
      Offset(centerCourtX - centerMarkHalfWidth, startY + courtHeight),
      Offset(centerCourtX + centerMarkHalfWidth, startY + courtHeight),
      linePaint,
    );

    // Draw colored service zones
    final servicePaint = Paint()..style = PaintingStyle.fill;

    // Wide service box (red)
    servicePaint.color = Colors.red.withOpacity(0.3);
    canvas.drawRect(
        Rect.fromLTRB(
            singlesStartX, topServiceLineY, startX + courtWidth / 4, netY),
        servicePaint);
    canvas.drawRect(
        Rect.fromLTRB(startX + courtWidth * 3 / 4, topServiceLineY,
            singlesStartX + singlesWidth, netY),
        servicePaint);

    // Body service box (green)
    servicePaint.color = Colors.green.withOpacity(0.3);
    canvas.drawRect(
        Rect.fromLTRB(startX + courtWidth / 4, topServiceLineY,
            startX + courtWidth * 3 / 8, netY),
        servicePaint);
    canvas.drawRect(
        Rect.fromLTRB(startX + courtWidth * 5 / 8, topServiceLineY,
            startX + courtWidth * 3 / 4, netY),
        servicePaint);

    // T service box (blue)
    servicePaint.color = Colors.blue.withOpacity(0.3);
    canvas.drawRect(
        Rect.fromLTRB(startX + courtWidth * 3 / 8, topServiceLineY,
            startX + courtWidth * 5 / 8, netY),
        servicePaint);
  }

  @override
  bool shouldRepaint(covariant CustomPainter oldDelegate) => false;
}
